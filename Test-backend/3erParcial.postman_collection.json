{
	"info": {
		"_postman_id": "ddfbac47-0777-4b2f-8e6f-3e908bf6f93b",
		"name": "3er Parcial",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "39346479"
	},
	"item": [
		{
			"name": "Get All Projects",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required Content-Type header with value application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the structure of the response JSON\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"    responseData.forEach(function(project) {\r",
							"        pm.expect(project).to.be.an('object');\r",
							"        pm.expect(project).to.include.all.keys('Id', 'Content', 'ItemsCount', 'Icon', 'ItemType', 'ParentId', 'Collapsed', 'Children', 'IsProjectShared', 'ProjectShareOwnerName', 'ProjectShareOwnerEmail', 'IsShareApproved', 'IsOwnProject', 'LastSyncedDateTime', 'LastUpdatedDate', 'Deleted', 'SyncClientCreationId');\r",
							"        if (project.Children.length > 0) {\r",
							"            project.Children.forEach(function(child) {\r",
							"                pm.expect(child).to.be.an('object');\r",
							"                pm.expect(child).to.include.all.keys('Id', 'Content', 'ItemsCount', 'Icon', 'ItemType', 'ParentId', 'Collapsed', 'Children', 'IsProjectShared', 'ProjectShareOwnerName', 'ProjectShareOwnerEmail', 'IsShareApproved', 'IsOwnProject', 'LastSyncedDateTime', 'LastUpdatedDate', 'Deleted', 'SyncClientCreationId');\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Children array is present and contains the expected number of elements\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    pm.expect(responseData[0].Children).to.exist.and.to.be.an('array');\r",
							"    pm.expect(responseData[0].Children).to.have.lengthOf(1);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate response properties\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(project => {\r",
							"        pm.expect(project).to.be.an('object');\r",
							"        pm.expect(project.Id).to.be.a('number');\r",
							"        pm.expect(project.Content).to.be.a('string');\r",
							"        pm.expect(project.ItemsCount).to.be.a('number');\r",
							"        pm.expect(project.Icon).to.be.a('number');\r",
							"        pm.expect(project.ItemType).to.be.a('number');\r",
							"        pm.expect(project.ParentId).to.be.oneOf([null, 'number']);\r",
							"        pm.expect(project.Collapsed).to.be.a('boolean');\r",
							"        pm.expect(project.ItemOrder).to.be.a('number');\r",
							"        pm.expect(project.IsProjectShared).to.be.a('boolean');\r",
							"        pm.expect(project.IsShareApproved).to.be.a('boolean');\r",
							"        pm.expect(project.IsOwnProject).to.be.a('boolean');\r",
							"        pm.expect(project.LastSyncedDateTime).to.be.a('string');\r",
							"        pm.expect(project.LastUpdatedDate).to.be.a('string');\r",
							"        pm.expect(project.Deleted).to.be.a('boolean');\r",
							"        pm.expect(project.SyncClientCreationId).to.be.oneOf([null, 'string']);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "{{password}}",
						"username": "alex.quiroga.p@ucb.edu.bo"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{url}}projects.json"
			},
			"response": []
		},
		{
			"name": "Create New Project",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('Id');\r",
							"    pm.expect(responseData).to.have.property('Content');\r",
							"    pm.expect(responseData).to.have.property('ItemsCount');\r",
							"    pm.expect(responseData).to.have.property('Icon');\r",
							"    pm.expect(responseData).to.have.property('ItemType');\r",
							"    pm.expect(responseData).to.have.property('ParentId');\r",
							"    pm.expect(responseData).to.have.property('Collapsed');\r",
							"    pm.expect(responseData).to.have.property('ItemOrder');\r",
							"    pm.expect(responseData).to.have.property('Children');\r",
							"    pm.expect(responseData).to.have.property('IsProjectShared');\r",
							"    pm.expect(responseData).to.have.property('ProjectShareOwnerName');\r",
							"    pm.expect(responseData).to.have.property('ProjectShareOwnerEmail');\r",
							"    pm.expect(responseData).to.have.property('IsShareApproved');\r",
							"    pm.expect(responseData).to.have.property('IsOwnProject');\r",
							"    pm.expect(responseData).to.have.property('LastSyncedDateTime');\r",
							"    pm.expect(responseData).to.have.property('LastUpdatedDate');\r",
							"    pm.expect(responseData).to.have.property('Deleted');\r",
							"    pm.expect(responseData).to.have.property('SyncClientCreationId');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is present and has the value 'application/json'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.Id).to.be.a('number');\r",
							"    pm.expect(responseData.Id).to.be.at.least(0, \"Id should be a non-negative integer\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "{{password}}",
						"username": "alex.quiroga.p@ucb.edu.bo"
					}
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Content\": \"Proyecto de prueba Alex Quiroga PÃ©rez 3er Parcial\",\r\n    \"Icon\": 4\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{url}}projects.json"
			},
			"response": []
		},
		{
			"name": "Get Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate the schema of the response body\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.TokenString).to.be.a('string');\r",
							"    pm.expect(responseData.UserEmail).to.be.a('string');\r",
							"    pm.expect(responseData.ExpirationTime).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify the presence of Content-Type header with value application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"TokenString, UserEmail, and ExpirationTime are present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.TokenString).to.exist;\r",
							"    pm.expect(responseData.UserEmail).to.exist;\r",
							"    pm.expect(responseData.ExpirationTime).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"UserEmail is in a valid email format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.UserEmail).to.be.a('string').and.to.match(/^.+@.+\\..+$/);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "{{password}}",
						"username": "alex.quiroga.p@ucb.edu.bo"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{url}}authentication/token.json"
			},
			"response": []
		},
		{
			"name": "Delete Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - ErrorMessage and ErrorCode\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.ErrorMessage).to.exist;\r",
							"    pm.expect(responseData.ErrorCode).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ErrorMessage is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.ErrorMessage).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ErrorMessage should be a non-empty string\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ErrorCode is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.ErrorCode).to.be.a('number').and.to.satisfy((errorCode) => errorCode >= 0, \"ErrorCode should be a non-negative integer\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": {
						"password": "{{password}}",
						"username": "alex.quiroga.p@ucb.edu.bo"
					}
				},
				"method": "DELETE",
				"header": [
					{
						"key": "token",
						"value": "130606f9e8264ff4b501f317ccb74785",
						"type": "text"
					}
				],
				"url": "{{url}}authentication/token.json"
			},
			"response": []
		}
	]
}